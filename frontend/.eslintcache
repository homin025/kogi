[{"C:\\Users\\minje.LAPTOP-GH5JCCS0\\Desktop\\front\\kogi\\frontend\\src\\index.js":"1","C:\\Users\\minje.LAPTOP-GH5JCCS0\\Desktop\\front\\kogi\\frontend\\src\\App.js":"2","C:\\Users\\minje.LAPTOP-GH5JCCS0\\Desktop\\front\\kogi\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\minje.LAPTOP-GH5JCCS0\\Desktop\\front\\kogi\\frontend\\src\\basepage.js":"4","C:\\Users\\minje.LAPTOP-GH5JCCS0\\Desktop\\front\\kogi\\frontend\\src\\question_generation.js":"5","C:\\Users\\minje.LAPTOP-GH5JCCS0\\Desktop\\front\\kogi\\frontend\\src\\tale_generation.js":"6","C:\\Users\\minje.LAPTOP-GH5JCCS0\\Desktop\\front\\kogi\\frontend\\src\\chat_bot.js":"7","C:\\Users\\minje.LAPTOP-GH5JCCS0\\Desktop\\front\\kogi\\frontend\\src\\review_generation.js":"8","C:\\Users\\minje.LAPTOP-GH5JCCS0\\Desktop\\front\\kogi\\frontend\\src\\header.js":"9","C:\\Users\\minje.LAPTOP-GH5JCCS0\\Desktop\\front\\kogi\\frontend\\src\\article_summarization.js":"10"},{"size":546,"mtime":1611238688912,"results":"11","hashOfConfig":"12"},{"size":208,"mtime":1611236697102,"results":"13","hashOfConfig":"12"},{"size":375,"mtime":1611230011604,"results":"14","hashOfConfig":"12"},{"size":8619,"mtime":1611238403735,"results":"15","hashOfConfig":"12"},{"size":13270,"mtime":1611240245036,"results":"16","hashOfConfig":"12"},{"size":14872,"mtime":1611240193805,"results":"17","hashOfConfig":"12"},{"size":9649,"mtime":1611230011598,"results":"18","hashOfConfig":"12"},{"size":14159,"mtime":1611240212318,"results":"19","hashOfConfig":"12"},{"size":4823,"mtime":1611236524257,"results":"20","hashOfConfig":"12"},{"size":13079,"mtime":1611241251206,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1b3rxy2",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\minje.LAPTOP-GH5JCCS0\\Desktop\\front\\kogi\\frontend\\src\\index.js",[],["47","48"],"C:\\Users\\minje.LAPTOP-GH5JCCS0\\Desktop\\front\\kogi\\frontend\\src\\App.js",[],"C:\\Users\\minje.LAPTOP-GH5JCCS0\\Desktop\\front\\kogi\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\minje.LAPTOP-GH5JCCS0\\Desktop\\front\\kogi\\frontend\\src\\basepage.js",["49","50","51","52","53","54"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {createMuiTheme, ThemeProvider, withStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport Question_generation from './question_generation';\r\nimport Tale_generation from './tale_generation';\r\nimport Review_generation from './review_generation';\r\nimport Article_summarization from './article_summarization';\r\nimport Chat_bot from './chat_bot'\r\nimport Header from './header';\r\nimport clsx from 'clsx';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport kogi from './kogi.jpg';\r\nimport './App.css';\r\nimport fontFamily from '@material-ui/core/Typography';\r\nimport ContactSupportSharpIcon from '@material-ui/icons/ContactSupportSharp';\r\nimport QuestionAnswerSharpIcon from '@material-ui/icons/QuestionAnswerSharp';\r\nimport AssignmentSharpIcon from '@material-ui/icons/AssignmentSharp';\r\nimport MenuBookSharpIcon from '@material-ui/icons/MenuBookSharp';\r\nimport EditLocationSharpIcon from '@material-ui/icons/EditLocationSharp';\r\n\r\nlet theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      light: '#63ccff',\r\n      main: '#009be5',\r\n      dark: '#006db3',\r\n    },\r\n  },\r\n  typography: {\r\n    \"fontFamily\" : `\"hoonDbk\"`,\r\n    \"fontSize\" : 18,\r\n    \"fontWeightLight\": 300,\r\n    \"fontWeightRegular\": 400,\r\n    \"fontWeightMedium\": 500,\r\n  },\r\n  shape: {\r\n    borderRadius: 8,\r\n  },\r\n  props: {\r\n    MuiTab: {\r\n      disableRipple: true,\r\n    },\r\n  },\r\n  mixins: {\r\n    toolbar: {\r\n      minHeight: 48,\r\n    },\r\n  },\r\n});\r\n\r\ntheme = {\r\n  ...theme,\r\n  overrides: {\r\n    MuiDrawer: {\r\n      paper: {\r\n        backgroundColor: '#18202c',\r\n      },\r\n    },\r\n    MuiButton: {\r\n      label: {\r\n        textTransform: 'none',\r\n      },\r\n      contained: {\r\n        boxShadow: 'none',\r\n        '&:active': {\r\n          boxShadow: 'none',\r\n        },\r\n      },\r\n    },\r\n    MuiTabs: {\r\n      root: {\r\n        marginLeft: theme.spacing(1),\r\n      },\r\n      indicator: {\r\n        height: 3,\r\n        borderTopLeftRadius: 3,\r\n        borderTopRightRadius: 3,\r\n        backgroundColor: theme.palette.common.white,\r\n      },\r\n    },\r\n    MuiTab: {\r\n      root: {\r\n        textTransform: 'none',\r\n        margin: '0 16px',\r\n        minWidth: 0,\r\n        padding: 0,\r\n        [theme.breakpoints.up('md')]: {\r\n          padding: 0,\r\n          minWidth: 0,\r\n        },\r\n      },\r\n    },\r\n    MuiIconButton: {\r\n      root: {\r\n        padding: theme.spacing(1),\r\n      },\r\n    },\r\n    MuiTooltip: {\r\n      tooltip: {\r\n        borderRadius: 4,\r\n      },\r\n    },\r\n    MuiDivider: {\r\n      root: {\r\n        backgroundColor: '#404854',\r\n      },\r\n    },\r\n    MuiListItemText: {\r\n      primary: {\r\n        fontWeight: theme.typography.fontWeightMedium,\r\n      },\r\n    },\r\n    MuiListItemIcon: {\r\n      root: {\r\n        color: 'inherit',\r\n        marginRight: 0,\r\n        '& svg': {\r\n          fontSize: 20,\r\n        },\r\n      },\r\n    },\r\n    MuiAvatar: {\r\n      root: {\r\n        width: 32,\r\n        height: 32,\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst drawerWidth = 170;\r\n\r\nconst styles = {\r\n  root: {\r\n    display: 'flex',\r\n    minHeight: '100vh',\r\n  },\r\n  drawer: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n  },\r\n  app: {\r\n    flex: 1,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  main: {\r\n    flex: 1,\r\n    padding: theme.spacing(4, 6),\r\n    background: '#eaeff1',\r\n  },\r\n  footer: {\r\n    padding: theme.spacing(2),\r\n    background: '#eaeff1',\r\n  },\r\n  firebase: {\r\n    fontSize: 24,\r\n    color: theme.palette.common.white,\r\n  },\r\n  categoryHeader: {\r\n    paddingTop: theme.spacing(2),\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  categoryHeaderPrimary: {\r\n    color: theme.palette.common.white,\r\n  },\r\n  item: {\r\n    paddingTop: 1,\r\n    paddingBottom: 1,\r\n    color: 'rgba(255, 255, 255, 0.7)',\r\n    '&:hover,&:focus': {\r\n      backgroundColor: 'rgba(255, 255, 255, 0.08)',\r\n    },\r\n  },\r\n  itemCategory: {\r\n    backgroundColor: '#232f3e',\r\n    boxShadow: '0 -1px 0 #404854 inset',\r\n    paddingTop: theme.spacing(2),\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  itemActiveItem: {\r\n    color: '#4fc3f7',\r\n  },\r\n  itemPrimary: {\r\n    fontSize: 'inherit',\r\n  },\r\n  itemIcon: {\r\n    minWidth: 'auto',\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  divider: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n};\r\n\r\nfunction Paperbase(props) {\r\n  let [button, setButton] = React.useState([true, false, false, false, false]);\r\n  const {...other } = props;\r\n  const categories = [\r\n    {\r\n      id: '기능',\r\n      children: [\r\n        { id: '질문생성', icon: <ContactSupportSharpIcon/>, active: button[0], bvalue : 0},\r\n        { id: '기사요약', icon: <AssignmentSharpIcon/> , active: button[1], bvalue : 1},\r\n        { id: '동화창작', icon: <MenuBookSharpIcon/>, active: button[2], bvalue : 2 },\r\n        { id: '리뷰생성', icon: <EditLocationSharpIcon/> , active: button[3], bvalue : 3},\r\n        { id: '챗봇모델', icon: <QuestionAnswerSharpIcon /> , active: button[4], bvalue : 4},\r\n      ],\r\n    },\r\n  ];\r\n  \r\n  const { classes } = props;\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  const handleListItemClick = (event, index) => {\r\n    setContent(index);\r\n    var buttons =[false, false, false, false, false];\r\n    buttons[index] = true;\r\n    setButton(buttons);\r\n  };\r\n\r\n  const [content, setContent] = React.useState(0);\r\n  function Content() {\r\n    if(content === 0) return <Question_generation/>;\r\n    else if(content === 1){return <Article_summarization/>}\r\n    else if(content === 2){return <Tale_generation/>}\r\n    else if(content === 3){return <Review_generation/>}\r\n    else if(content === 4){return <Chat_bot/>}\r\n  }\r\n  \r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <div className={classes.root}>\r\n        <CssBaseline />\r\n        {/* <Grid container spacing={2}  alignItems=\"center\">\r\n        <Grid item xs={2}> */}\r\n        <nav className={classes.drawer}>\r\n          <Hidden xsDown implementation=\"css\">\r\n            <Drawer variant=\"permanent\" {...other}>\r\n              <List disablePadding>\r\n                <ListItem className={clsx(classes.firebase, classes.item, classes.itemCategory)}>\r\n                  <img src = {kogi} width='150' alt=''/>\r\n                </ListItem>\r\n                {categories.map(({ id, children }) => (\r\n                  <React.Fragment key={id}>\r\n                    <ListItem className={classes.categoryHeader}>\r\n                      <ListItemText\r\n                        classes={{\r\n                          primary: classes.categoryHeaderPrimary,\r\n                        }}>\r\n                        {id}\r\n                      </ListItemText>\r\n                    </ListItem>\r\n                    {children.map(({ id: childId, icon, active, bvalue }) => (\r\n                      <ListItem\r\n                        key={childId}\r\n                        value={bvalue}\r\n                        button\r\n                        onClick={(event) => handleListItemClick(event, bvalue)}\r\n                        className={clsx(classes.item, active && classes.itemActiveItem)}\r\n                      >\r\n                        <ListItemIcon className={classes.itemIcon}>{icon}</ListItemIcon>\r\n                        <ListItemText\r\n                          classes={{\r\n                            primary: classes.itemPrimary,\r\n                          }}>\r\n                          {childId}\r\n                        </ListItemText>\r\n                      </ListItem>\r\n                    ))}\r\n                    <Divider className={classes.divider} />\r\n                  </React.Fragment>\r\n                ))}\r\n              </List>\r\n            </Drawer>\r\n          </Hidden>\r\n        </nav>\r\n        \r\n        <div className={classes.app}>\r\n          <Header index = {content} onDrawerToggle={handleDrawerToggle} />\r\n          <main className={classes.main}>\r\n            {Content()}\r\n          </main>\r\n          <footer className={classes.footer}>\r\n          </footer>\r\n        </div>\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nPaperbase.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Paperbase);","C:\\Users\\minje.LAPTOP-GH5JCCS0\\Desktop\\front\\kogi\\frontend\\src\\question_generation.js",["55"],"import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport FetchIntercept from 'fetch-intercept';\r\n\r\n//const apiURL = \"http://14.49.45.139:9999\";\r\n\r\nconst styles = (theme) => ({\r\n  paperPrimary: {\r\n    maxWidth: 3000,\r\n    margin: theme.spacing(1),\r\n    overflow: 'hidden',\r\n  },\r\n  paperSecondary: {\r\n    maxWidth: 300,\r\n    margin: 'auto',\r\n    overflow: 'hidden',\r\n  },\r\n  generateBar: {\r\n    borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\r\n  },\r\n  generateInput: {\r\n    fontSize: theme.typography.fontSize,\r\n  },\r\n  block: {\r\n    display: 'block',\r\n  },\r\n  button: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  contentWrapper: {\r\n    margin: '10px 16px',\r\n  },\r\n  slide:{\r\n    width : 200\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  buttons: {\r\n    minWidth: 200,\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n});\r\n\r\nfunction Question_generation(props) {\r\n  const { classes } = props;\r\n  let [model, setModel] = useState('korquad');\r\n  let [text, setText] = useState('');\r\n  let [keyword, setKeyword] = useState([]);\r\n  let [question, setQuestion] = useState([]);\r\n  let [answer, setAnswer] = useState([]);\r\n  let [temperature, setTemperature] = useState(1.0);\r\n  let [top_p, setTopp] = useState(0.9);\r\n  let [top_k, setTopk] = useState(40);\r\n  let [state, setState] = useState(false);\r\n  let [time, setTime] = useState();\r\n  let [sent, setSent] = useState(false);\r\n  function _post(Data) {\r\n    const raw = JSON.stringify(Data);\r\n\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Access-Control-Allow-Headers': '*',\r\n      },\r\n      body: raw\r\n    };\r\n    const start = new Date();\r\n    fetch(`/api/question-generation`, requestOptions)\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        setQuestion(json['questions'], setAnswer(json['answers']));\r\n        setTime(`${(new Date().getTime()-start.getTime())/1000}`)\r\n        setSent(true);\r\n      })\r\n      .catch(error => {\r\n        setText(error);\r\n        setTime(`${(new Date().getTime()-start.getTime())/1000}`)\r\n        setSent(true);\r\n      });\r\n      unregister();\r\n  }\r\n\r\n  const unregister = FetchIntercept.register({\r\n    request: function (url, config) {\r\n        setState(true);\r\n\r\n        return [url, config];\r\n    },\r\n\r\n    requestError: function (error) {\r\n      setState(false);\r\n        return Promise.reject(error);\r\n    },\r\n\r\n    response: function (response) {\r\n      setState(false);\r\n        return response;\r\n    },\r\n\r\n    responseError: function (error) {\r\n      setState(false);\r\n        return Promise.reject(error);\r\n    }\r\n  });\r\n\r\n  function refresh() {\r\n    setText('');\r\n    setKeyword([])\r\n    setSent(false);\r\n  }\r\n\r\n  function handleClick() {\r\n    const Data = {\r\n      textID: \"QuestionGeneration\",\r\n      content: text,\r\n      model: model,\r\n      temperature: temperature,\r\n      top_p: top_p,\r\n      top_k: top_k,\r\n      keywords: keyword,\r\n      sentence_length: \"10\"\r\n    }\r\n    setState(true);\r\n    _post(Data);\r\n  }\r\n\r\n  const handleModel = (event) => {\r\n    setModel(event.target.value);\r\n  };\r\n\r\n  const handleExample = (event) => {\r\n    const Data = {\r\n      textID: \"QuestionGeneration\",\r\n      index: event.target.value\r\n    }\r\n    setState(true);\r\n\r\n    if (event.target.value === 0) return;\r\n\r\n    const raw = JSON.stringify(Data);\r\n\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Access-Control-Allow-Headers': '*',\r\n      },\r\n      body: raw\r\n    };\r\n\r\n    fetch(`/api/get-example`, requestOptions)\r\n      .then(response =>response.json())\r\n      .then(json => setText(json['content'], setKeyword(json['keyword'])))\r\n      .then()\r\n      .catch(error => setText(error));\r\n      unregister();\r\n  };\r\n  \r\n  const handleChange = (event) => {\r\n    setText(event.target.value);\r\n  }\r\n  \r\n  const handleKeyword = (event) => {\r\n    const arr = event.target.value.replace(' ', '').split(',')\r\n    setKeyword(arr);\r\n  }\r\n\r\n  function tempSlide(event, newValue) {\r\n    setTemperature(newValue);\r\n  }\r\n\r\n  function toppSlide(event, newValue) {\r\n    setTopp(newValue);\r\n  }\r\n\r\n  function topkSlide(event, newValue) {\r\n    setTopk(newValue);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Toolbar>\r\n        <FormControl variant=\"outlined\" className={classes.formControl}>\r\n          <InputLabel shrink htmlFor=\"model selection\">\r\n            모델\r\n          </InputLabel>\r\n          <Select\r\n            native\r\n            onChange={handleModel}\r\n            label=\"Model\"\r\n            inputProps={{\r\n              name: 'models',\r\n              id: 'model selection',\r\n            }}>\r\n            <option value=\"korquad\">Korquad v1.0</option>\r\n          </Select>\r\n        </FormControl>\r\n        <FormControl variant=\"outlined\" className={classes.formControl}>\r\n          <InputLabel shrink htmlFor=\"example selection\">\r\n            예시\r\n          </InputLabel>\r\n          <Select\r\n            native\r\n            onChange={handleExample}\r\n            label=\"Example\"\r\n            inputProps={{\r\n              name: 'examples',\r\n              id: 'example selection',\r\n            }}>\r\n            <option value={0}>없음</option>\r\n            <option value={1}>코로나 대응</option>\r\n            <option value={2}>도깨비 마을</option>\r\n            <option value={3}>해바라기</option>\r\n          </Select>\r\n        </FormControl>\r\n        <span>&nbsp;&nbsp;&nbsp;</span>\r\n      </Toolbar>\r\n      <Grid container spacing={2}  alignItems=\"center\">\r\n        <Grid item xs={8}>\r\n          <Toolbar>\r\n          <InputLabel shrink htmlFor=\"context input\">\r\n            본문\r\n          </InputLabel>\r\n          </Toolbar>\r\n          <Paper className={classes.paperPrimary}>\r\n            <Toolbar>\r\n                  <TextField\r\n                    fullWidth\r\n                    multiline\r\n                    rows={12}\r\n                    placeholder='본문을 입력해주세요.'\r\n                    value={text}\r\n                    onChange={handleChange}\r\n                    InputProps={{\r\n                      disableUnderline: true,\r\n                      className: classes.searchInput,\r\n                    }}\r\n                  />\r\n            </Toolbar>\r\n          </Paper>\r\n          <Toolbar>\r\n          <InputLabel shrink htmlFor=\"keyword input\">\r\n            키워드\r\n          </InputLabel>\r\n          </Toolbar>\r\n          <Paper className={classes.paperPrimary}>\r\n            <Toolbar>\r\n              <Grid container spacing={2}  alignItems=\"center\">\r\n                <Grid item xs>\r\n                  <TextField\r\n                    fullWidth\r\n                    placeholder='키워드를 반점으로 나누어 입력해주세요.'\r\n                    onChange={handleKeyword}\r\n                    value={keyword.join()}\r\n                    InputProps={{\r\n                      disableUnderline: true,\r\n                      className: classes.searchInput,\r\n                    }}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Toolbar>\r\n          </Paper>\r\n\r\n          <div style = {{float:'right'}}>\r\n          <Toolbar>\r\n          <Typography color = \"textSecondary\">\r\n              {sent ? `응답시간 : ${time}s` : ''}\r\n          </Typography>\r\n            <span>&nbsp;&nbsp;&nbsp;</span>\r\n          <Button onClick={handleClick} variant=\"contained\" color=\"primary\" className={classes.button}>\r\n                    질문생성\r\n                  </Button>\r\n                  <Tooltip title=\"Refresh\">\r\n                    <IconButton onClick={refresh}>\r\n                      <RefreshIcon className={classes.block} color=\"inherit\" />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n          </Toolbar>\r\n          </div>\r\n          <Toolbar>\r\n          <InputLabel shrink htmlFor=\"generation output\">\r\n            결과\r\n          </InputLabel>\r\n          </Toolbar>\r\n          <Paper className={classes.paperPrimary}>\r\n            <Toolbar>\r\n              <List>\r\n                {question.map((item, index) => (\r\n                  <ListItem alignItems=\"flex-start\">\r\n                    <ListItemText>\r\n                      {index}. \r\n                    </ListItemText>\r\n                    <ListItemText>\r\n                      질문: {question[index]}\r\n                    </ListItemText>\r\n                    <Divider variant=\"inset\" component=\"li\" />\r\n                    <ListItemText>\r\n                      정답: {answer[index]}\r\n                    </ListItemText>\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            </Toolbar>\r\n          </Paper>\r\n        </Grid>\r\n        \r\n        <Grid item xs>\r\n          <Paper className={classes.paperSecondary} align ='center'>\r\n            <Toolbar alignItems=\"center\">\r\n              <Grid item xs = {11}>\r\n                <Typography id=\"temperature\" gutterBottom>\r\n                    Temperature = {temperature} \r\n                </Typography> \r\n              </Grid>\r\n              <Grid item xs = {1}>\r\n                <Tooltip title={<h2>생성되는 글의 창의성을 조절합니다</h2>}>\r\n                  <IconButton size = 'small' color=\"inherit\">\r\n                    <HelpIcon />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </Grid>\r\n            </Toolbar>\r\n            <Slider\r\n              className={classes.slide}\r\n              defaultValue={1.0}\r\n              aria-labelledby=\"discrete-slider-small-steps\"\r\n              step={0.1}\r\n              marks\r\n              min={0.5}\r\n              max={2.0}\r\n              valueLabelDisplay=\"auto\"\r\n              onChange = {tempSlide}\r\n            />\r\n            <Toolbar alignItems=\"center\">\r\n              <Grid item xs = {11}>\r\n                <Typography id=\"top_p\" gutterBottom>\r\n                  Top P = {top_p}\r\n                </Typography> \r\n              </Grid>\r\n              <Grid item xs = {1}>\r\n                <Tooltip title={<h2>샘플링될 단어의 누적분포 합이 P보다 크지 않도록 제한합니다</h2>}>\r\n                  <IconButton size = 'small' color=\"inherit\">\r\n                    <HelpIcon />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </Grid>\r\n            </Toolbar>\r\n            <Slider\r\n              className={classes.slide}\r\n              defaultValue={0.9}\r\n              aria-labelledby=\"discrete-slider-small-steps\"\r\n              step={0.05}\r\n              marks\r\n              min={0.5}\r\n              max={1.0}\r\n              valueLabelDisplay=\"auto\"\r\n              onChange = {toppSlide}\r\n            />\r\n            <Toolbar alignItems=\"center\">\r\n              <Grid item xs = {11}>\r\n                <Typography id=\"top_k\" gutterBottom>\r\n                  Top K = {top_k}\r\n                </Typography> \r\n              </Grid>\r\n              <Grid item xs = {1}>\r\n                <Tooltip title={<h2>샘플링될 단어의 갯수를 K개로 제한합니다</h2>}>\r\n                  <IconButton size = 'small' color=\"inherit\">\r\n                    <HelpIcon />\r\n                  </IconButton>\r\n                </Tooltip>\r\n              </Grid>\r\n            </Toolbar>\r\n            <Slider\r\n              className={classes.slide}\r\n              defaultValue={10}\r\n              aria-labelledby=\"discrete-slider-small-steps\"\r\n              step={5}\r\n              marks\r\n              min={5}\r\n              max={100}\r\n              valueLabelDisplay=\"auto\"\r\n              onChange = {topkSlide}\r\n            />\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n      <Backdrop className={classes.backdrop} open={state}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </div>\r\n  );\r\n}\r\n\r\nQuestion_generation.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Question_generation);","C:\\Users\\minje.LAPTOP-GH5JCCS0\\Desktop\\front\\kogi\\frontend\\src\\tale_generation.js",[],"C:\\Users\\minje.LAPTOP-GH5JCCS0\\Desktop\\front\\kogi\\frontend\\src\\chat_bot.js",["56","57","58","59"],"import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport clsx from 'clsx';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport fetchIntercept from 'fetch-intercept';\r\nconst styles = (theme) => ({\r\n  paperPrimary: {\r\n    maxWidth: 3000,\r\n    margin: 'auto',\r\n    overflow: 'hidden',\r\n  },\r\n  paperSecondary: {\r\n    maxWidth: 300,\r\n    margin: 'auto',\r\n    overflow: 'hidden',\r\n  },\r\n  generateBar: {\r\n    borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\r\n  },\r\n  generateInput: {\r\n    fontSize: theme.typography.fontSize,\r\n  },\r\n  block: {\r\n    display: 'block',\r\n  },\r\n  button: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  contentWrapper: {\r\n    margin: '40px 16px',\r\n  },\r\n  slide:{\r\n    width : 200\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  me:{\r\n    textAlign: 'right'\r\n  },\r\n  bot:{\r\n    textAlign : 'left'\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n});\r\n\r\nconst apiURL = \"http://localhost:8888\";\r\n\r\nfunction Chat_bot(props) {\r\n  const { classes } = props;\r\n  let [model, setModel] = useState('korquad');\r\n  let [result, setResult] = useState('');\r\n  let [Text, setText] = useState('');\r\n  let [converse, setConverse] = useState([]);\r\n  let [temperature, setTemp] = useState(1.0);\r\n  let [top_p, setTopp] = useState(0.9);\r\n  let [top_k, setTopk] = useState(10);\r\n  let [state, setState] = useState(false);\r\n  const unregister = fetchIntercept.register({\r\n    request: function (url, config) {\r\n        setState(true);\r\n        return [url, config];\r\n    },\r\n\r\n    requestError: function (error) {\r\n      setState(false);\r\n        return Promise.reject(error);\r\n    },\r\n\r\n    response: function (response) {\r\n      setState(false);\r\n        return response;\r\n    },\r\n\r\n    responseError: function (error) {\r\n      setState(false);\r\n        return Promise.reject(error);\r\n    }\r\n});\r\n  function _post(text) {\r\n    unregister();\r\n    const Data = {\r\n      textID: \"Chat-Bot\",\r\n      content: text,\r\n      model: model,\r\n      temperature: temperature,\r\n      top_p: top_p,\r\n      top_k: top_k,\r\n      sentence_length: \"10\",\r\n      sentence_count: \"3\"\r\n    }\r\n    const raw = JSON.stringify(Data);\r\n\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Access-Control-Allow-Headers': '*',\r\n      },\r\n      body: raw\r\n    };\r\n\r\n    fetch(`${apiURL}/api/question-generation`, requestOptions)\r\n      .then(response => response.json())\r\n      .then(json=>setResult(json['sentence']))\r\n      .catch(error => setText(error));\r\n  };\r\n\r\n  function refresh(){\r\n    setText('');\r\n    setConverse([]);\r\n  };\r\n  \r\n  const handleChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  function addChat(text){\r\n    var temp = [...converse, {id : text, toggle : 0}];\r\n    setConverse(temp);\r\n    setText('');\r\n    _post(text);\r\n    temp = [...temp, {id : result, toggle : 1}];\r\n    setConverse(temp);\r\n  };\r\n\r\n  function handleClick(){\r\n    addChat(Text);\r\n  };\r\n\r\n  function tempSlide(event, newValue){\r\n    setTemp(newValue);\r\n  };\r\n\r\n  function toppSlide(event, newValue){\r\n    setTopp(newValue);\r\n  };\r\n\r\n  function topkSlide(event, newValue){\r\n    setTopk(newValue);\r\n  };\r\n\r\n  const handleModel = (event) => {\r\n    setModel(event.target.value);\r\n  };\r\n\r\n  const keyHandler = (event)=>{\r\n    if(event.key === \"Enter\"){\r\n      addChat(Text);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <Toolbar>\r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel shrink htmlFor=\"model selection\">\r\n           모델\r\n          </InputLabel>\r\n          <NativeSelect\r\n            onChange={handleModel}\r\n            inputProps={{\r\n            name: 'models',\r\n            id: 'model selection',\r\n            }}\r\n          >\r\n            <option value=\"chatbot\">챗봇모델</option>\r\n          </NativeSelect>\r\n        {/* <FormHelperText>Label + placeholder</FormHelperText> */}\r\n        </FormControl>\r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel shrink htmlFor=\"example selection\">\r\n          예시\r\n          </InputLabel>\r\n          <NativeSelect\r\n          \r\n            inputProps={{\r\n              name: 'examples',\r\n              id: 'example selection',\r\n            }}\r\n          >\r\n          <option value=\"\">None</option>\r\n         </NativeSelect>\r\n        {/* <FormHelperText>Label + placeholder</FormHelperText> */}\r\n        </FormControl>\r\n      </Toolbar>\r\n\r\n      <Grid container spacing={2}  alignItems=\"center\">\r\n        <Grid item xs={8}>\r\n          <Paper className={classes.paperPrimary}>\r\n            <div className={classes.contentWrapper}>\r\n              <List style={{height: '500px', border:'1px solid black', overflow: 'hidden'}}>\r\n                <ListSubheader/>\r\n              {converse.map(({ id: childId, toggle: user }) => (\r\n              <ListItem\r\n                value = {user}\r\n                key={childId}\r\n              >\r\n              <ListItemText\r\n                className={clsx((!user)&&classes.me, (user)&&classes.bot)}\r\n              >\r\n                {childId}\r\n              </ListItemText>\r\n              </ListItem>\r\n            ))}\r\n              </List>\r\n            </div>\r\n              <Divider variant=\"middle\" />\r\n            \r\n              <Toolbar>\r\n                <Grid container spacing={2}  alignItems=\"center\">\r\n                  <Grid item xs>\r\n                    <TextField\r\n                      fullWidth\r\n                      placeholder='대화를 입력해주세요'\r\n                      value={Text}\r\n                      onKeyDown={keyHandler}\r\n                      onChange={handleChange}\r\n                      InputProps={{\r\n                        disableUnderline: true,\r\n                        className: classes.searchInput,\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item>\r\n                    <Button onClick={handleClick} variant=\"contained\" color=\"primary\" className={classes.button}>\r\n                      생성\r\n                    </Button>\r\n                    <Tooltip title=\"Refresh\">\r\n                      <IconButton onClick={refresh}>\r\n                        <RefreshIcon className={classes.block} color=\"inherit\" />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                  </Grid>\r\n                </Grid>\r\n              </Toolbar>\r\n            </Paper>\r\n          </Grid>\r\n        <Grid item xs>\r\n          <Paper className={classes.paperSecondary} align ='center'>\r\n            <Typography id=\"temperature\" gutterBottom>\r\n              temperature : {temperature}\r\n            </Typography>\r\n            <Slider\r\n              className={classes.slide}\r\n              defaultValue={1.0}\r\n              aria-labelledby=\"discrete-slider-small-steps\"\r\n              step={0.1}\r\n              marks\r\n              min={0.5}\r\n              max={2.0}\r\n              valueLabelDisplay=\"auto\"\r\n              onChange = {tempSlide}\r\n            />\r\n            <Typography id=\"top_p\" gutterBottom>\r\n              top_p : {top_p}\r\n            </Typography>\r\n            <Slider\r\n              className={classes.slide}\r\n              defaultValue={0.9}\r\n              aria-labelledby=\"discrete-slider-small-steps\"\r\n              step={0.05}\r\n              marks\r\n              min={0.5}\r\n              max={1.0}\r\n              valueLabelDisplay=\"auto\"\r\n              onChange = {toppSlide}\r\n            />\r\n            <Typography id=\"top_k\" gutterBottom>\r\n              top_k : {top_k}\r\n            </Typography>\r\n            <Slider\r\n              className={classes.slide}\r\n              defaultValue={10}\r\n              aria-labelledby=\"discrete-slider-small-steps\"\r\n              step={5}\r\n              marks\r\n              min={5}\r\n              max={100}\r\n              valueLabelDisplay=\"auto\"\r\n              onChange = {topkSlide}\r\n            />\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n      <Backdrop className={classes.backdrop} open={state}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </div>\r\n  );\r\n}\r\n\r\nChat_bot.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Chat_bot);","C:\\Users\\minje.LAPTOP-GH5JCCS0\\Desktop\\front\\kogi\\frontend\\src\\review_generation.js",[],"C:\\Users\\minje.LAPTOP-GH5JCCS0\\Desktop\\front\\kogi\\frontend\\src\\header.js",["60","61","62","63","64","65","66","67","68","69","70","71","72","73"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Link from '@material-ui/core/Link';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport ContactSupportSharpIcon from '@material-ui/icons/ContactSupportSharp';\r\nimport QuestionAnswerSharpIcon from '@material-ui/icons/QuestionAnswerSharp';\r\nimport AssignmentSharpIcon from '@material-ui/icons/AssignmentSharp';\r\nimport MenuBookSharpIcon from '@material-ui/icons/MenuBookSharp';\r\nimport EditLocationSharpIcon from '@material-ui/icons/EditLocationSharp';\r\nimport Box from'@material-ui/core/Box'\r\nconst lightColor = 'rgba(255, 255, 255, 0.7)';\r\n\r\nconst styles = (theme) => ({\r\n  secondaryBar: {\r\n    zIndex: 0,\r\n  },\r\n  menuButton: {\r\n    marginLeft: -theme.spacing(1),\r\n  },\r\n  iconButtonAvatar: {\r\n    padding: 4,\r\n  },\r\n  link: {\r\n    textDecoration: 'none',\r\n    color: lightColor,\r\n    '&:hover': {\r\n      color: theme.palette.common.white,\r\n    },\r\n  },\r\n  button: {\r\n    borderColor: lightColor,\r\n  },\r\n});\r\n\r\n\r\n\r\nfunction Header(props) {\r\n  const { classes, onDrawerToggle } = props;\r\n  let [icons, setIcon] = React.useState([<ContactSupportSharpIcon/>,<AssignmentSharpIcon/>,<MenuBookSharpIcon/>,<EditLocationSharpIcon/>,<QuestionAnswerSharpIcon/>]);\r\n  let [title, setTitle] = React.useState(['질문생성','기사요약','동화창작','리뷰생성','챗봇모델']);\r\n  \r\n  return (\r\n    <React.Fragment>\r\n      {/* <AppBar color=\"primary\" position=\"sticky\" elevation={0}>\r\n        <Toolbar>\r\n          <Grid container spacing={1} alignItems=\"center\">\r\n            <Hidden smUp>\r\n              <Grid item>\r\n                <IconButton\r\n                  color=\"inherit\"\r\n                  aria-label=\"open drawer\"\r\n                  onClick={onDrawerToggle}\r\n                  className={classes.menuButton}\r\n                >\r\n                  <MenuIcon />\r\n                </IconButton>\r\n              </Grid>\r\n            </Hidden>\r\n            <Grid item xs />\r\n            <Grid item>\r\n              <Link className={classes.link} href=\"#\" variant=\"body2\">\r\n                Go to docs\r\n              </Link>\r\n            </Grid>\r\n            <Grid item>\r\n              <Tooltip title=\"Alerts • No alerts\">\r\n                <IconButton color=\"inherit\">\r\n                  <NotificationsIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </Grid>\r\n            <Grid item>\r\n              <IconButton color=\"inherit\" className={classes.iconButtonAvatar}>\r\n                <Avatar src=\"/static/images/avatar/1.jpg\" alt=\"My Avatar\" />\r\n              </IconButton>\r\n            </Grid>\r\n          </Grid>\r\n        </Toolbar>\r\n      </AppBar> */}\r\n      <AppBar\r\n        component=\"div\"\r\n        className={classes.secondaryBar}\r\n        color=\"primary\"\r\n        position=\"static\"\r\n        elevation={0}\r\n      >\r\n        <Toolbar>\r\n          <Box fontFamily = \"redPost\">\r\n          <Grid container alignItems=\"center\" spacing={1}>\r\n            <Grid item xs>\r\n              <Typography color=\"inherit\" variant=\"h5\" component=\"h1\">\r\n                {icons[props.index]} {title[props.index]}\r\n              </Typography>\r\n            </Grid>\r\n            {/* <Grid item>\r\n              <Button className={classes.button} variant=\"outlined\" color=\"inherit\" size=\"small\">\r\n                Web setup\r\n              </Button>\r\n            </Grid> */}\r\n            \r\n          </Grid>\r\n          </Box>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {/* <AppBar\r\n        component=\"div\"\r\n        className={classes.secondaryBar}\r\n        color=\"primary\"\r\n        position=\"static\"\r\n        elevation={0}\r\n      >\r\n        <Tabs value={0} textColor=\"inherit\">\r\n          <Tab textColor=\"inherit\" label=\"Users\" />\r\n          <Tab textColor=\"inherit\" label=\"Sign-in method\" />\r\n          <Tab textColor=\"inherit\" label=\"Templates\" />\r\n          <Tab textColor=\"inherit\" label=\"Usage\" />\r\n        </Tabs>\r\n      </AppBar> */}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nHeader.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  onDrawerToggle: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Header);","C:\\Users\\minje.LAPTOP-GH5JCCS0\\Desktop\\front\\kogi\\frontend\\src\\article_summarization.js",[],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":21,"column":8,"nodeType":"80","messageId":"81","endLine":21,"endColumn":18},{"ruleId":"82","severity":1,"message":"83","line":237,"column":30,"nodeType":"84","endLine":237,"endColumn":52},{"ruleId":"82","severity":1,"message":"85","line":238,"column":35,"nodeType":"84","endLine":238,"endColumn":59},{"ruleId":"82","severity":1,"message":"86","line":239,"column":35,"nodeType":"84","endLine":239,"endColumn":53},{"ruleId":"82","severity":1,"message":"87","line":240,"column":35,"nodeType":"84","endLine":240,"endColumn":55},{"ruleId":"82","severity":1,"message":"88","line":241,"column":35,"nodeType":"84","endLine":241,"endColumn":46},{"ruleId":"78","severity":1,"message":"89","line":16,"column":8,"nodeType":"80","messageId":"81","endLine":16,"endColumn":20},{"ruleId":"78","severity":1,"message":"90","line":3,"column":8,"nodeType":"80","messageId":"81","endLine":3,"endColumn":14},{"ruleId":"78","severity":1,"message":"91","line":13,"column":8,"nodeType":"80","messageId":"81","endLine":13,"endColumn":18},{"ruleId":"78","severity":1,"message":"92","line":19,"column":8,"nodeType":"80","messageId":"81","endLine":19,"endColumn":22},{"ruleId":"78","severity":1,"message":"89","line":23,"column":8,"nodeType":"80","messageId":"81","endLine":23,"endColumn":20},{"ruleId":"78","severity":1,"message":"93","line":4,"column":8,"nodeType":"80","messageId":"81","endLine":4,"endColumn":14},{"ruleId":"78","severity":1,"message":"94","line":5,"column":8,"nodeType":"80","messageId":"81","endLine":5,"endColumn":14},{"ruleId":"78","severity":1,"message":"95","line":7,"column":8,"nodeType":"80","messageId":"81","endLine":7,"endColumn":16},{"ruleId":"78","severity":1,"message":"96","line":8,"column":8,"nodeType":"80","messageId":"81","endLine":8,"endColumn":14},{"ruleId":"78","severity":1,"message":"97","line":9,"column":8,"nodeType":"80","messageId":"81","endLine":9,"endColumn":18},{"ruleId":"78","severity":1,"message":"98","line":10,"column":8,"nodeType":"80","messageId":"81","endLine":10,"endColumn":12},{"ruleId":"78","severity":1,"message":"99","line":11,"column":8,"nodeType":"80","messageId":"81","endLine":11,"endColumn":16},{"ruleId":"78","severity":1,"message":"100","line":12,"column":8,"nodeType":"80","messageId":"81","endLine":12,"endColumn":25},{"ruleId":"78","severity":1,"message":"101","line":13,"column":8,"nodeType":"80","messageId":"81","endLine":13,"endColumn":11},{"ruleId":"78","severity":1,"message":"102","line":14,"column":8,"nodeType":"80","messageId":"81","endLine":14,"endColumn":12},{"ruleId":"78","severity":1,"message":"103","line":16,"column":8,"nodeType":"80","messageId":"81","endLine":16,"endColumn":15},{"ruleId":"78","severity":1,"message":"104","line":52,"column":20,"nodeType":"80","messageId":"81","endLine":52,"endColumn":34},{"ruleId":"78","severity":1,"message":"105","line":53,"column":15,"nodeType":"80","messageId":"81","endLine":53,"endColumn":22},{"ruleId":"78","severity":1,"message":"106","line":54,"column":15,"nodeType":"80","messageId":"81","endLine":54,"endColumn":23},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"no-unused-vars","'fontFamily' is defined but never used.","Identifier","unusedVar","react/jsx-pascal-case","Imported JSX component Question_generation must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component Article_summarization must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Tale_generation must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Review_generation must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Chat_bot must be in PascalCase or SCREAMING_SNAKE_CASE","'ListItemIcon' is defined but never used.","'AppBar' is defined but never used.","'SearchIcon' is defined but never used.","'FormHelperText' is defined but never used.","'Avatar' is defined but never used.","'Button' is defined but never used.","'HelpIcon' is defined but never used.","'Hidden' is defined but never used.","'IconButton' is defined but never used.","'Link' is defined but never used.","'MenuIcon' is defined but never used.","'NotificationsIcon' is defined but never used.","'Tab' is defined but never used.","'Tabs' is defined but never used.","'Tooltip' is defined but never used.","'onDrawerToggle' is assigned a value but never used.","'setIcon' is assigned a value but never used.","'setTitle' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]