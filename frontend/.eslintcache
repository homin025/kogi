[{"C:\\Users\\homin\\Documents\\GitHub\\kogi\\frontend\\src\\index.js":"1","C:\\Users\\homin\\Documents\\GitHub\\kogi\\frontend\\src\\App.js":"2","C:\\Users\\homin\\Documents\\GitHub\\kogi\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\homin\\Documents\\GitHub\\kogi\\frontend\\src\\basepage.js":"4","C:\\Users\\homin\\Documents\\GitHub\\kogi\\frontend\\src\\navigator.js":"5","C:\\Users\\homin\\Documents\\GitHub\\kogi\\frontend\\src\\header.js":"6","C:\\Users\\homin\\Documents\\GitHub\\kogi\\frontend\\src\\question_generation.js":"7","C:\\Users\\homin\\Documents\\GitHub\\kogi\\frontend\\src\\article_summarization.js":"8","C:\\Users\\homin\\Documents\\GitHub\\kogi\\frontend\\src\\chat_bot.js":"9","C:\\Users\\homin\\Documents\\GitHub\\kogi\\frontend\\src\\review_generation.js":"10","C:\\Users\\homin\\Documents\\GitHub\\kogi\\frontend\\src\\tale_generation.js":"11"},{"size":517,"mtime":1610792019447,"results":"12","hashOfConfig":"13"},{"size":208,"mtime":1610792019436,"results":"14","hashOfConfig":"13"},{"size":375,"mtime":1610792019455,"results":"15","hashOfConfig":"13"},{"size":8490,"mtime":1611203757357,"results":"16","hashOfConfig":"13"},{"size":3922,"mtime":1610792019454,"results":"17","hashOfConfig":"13"},{"size":4727,"mtime":1611127206000,"results":"18","hashOfConfig":"13"},{"size":12801,"mtime":1611217108555,"results":"19","hashOfConfig":"13"},{"size":12589,"mtime":1611217831754,"results":"20","hashOfConfig":"13"},{"size":9649,"mtime":1611127200000,"results":"21","hashOfConfig":"13"},{"size":13577,"mtime":1611212677056,"results":"22","hashOfConfig":"13"},{"size":14282,"mtime":1611214313029,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1ltah0p",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\homin\\Documents\\GitHub\\kogi\\frontend\\src\\index.js",[],["52","53"],"C:\\Users\\homin\\Documents\\GitHub\\kogi\\frontend\\src\\App.js",[],"C:\\Users\\homin\\Documents\\GitHub\\kogi\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\homin\\Documents\\GitHub\\kogi\\frontend\\src\\basepage.js",["54","55","56","57","58"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {createMuiTheme, ThemeProvider, withStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport Question_generation from './question_generation';\r\nimport Tale_generation from './tale_generation';\r\nimport Review_generation from './review_generation';\r\nimport Article_summarization from './article_summarization';\r\nimport Chat_bot from './chat_bot'\r\nimport Header from './header';\r\nimport clsx from 'clsx';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport kogi from './kogi.jpg';\r\n\r\nimport ContactSupportSharpIcon from '@material-ui/icons/ContactSupportSharp';\r\nimport QuestionAnswerSharpIcon from '@material-ui/icons/QuestionAnswerSharp';\r\nimport AssignmentSharpIcon from '@material-ui/icons/AssignmentSharp';\r\nimport MenuBookSharpIcon from '@material-ui/icons/MenuBookSharp';\r\nimport EditLocationSharpIcon from '@material-ui/icons/EditLocationSharp';\r\n\r\nlet theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      light: '#63ccff',\r\n      main: '#009be5',\r\n      dark: '#006db3',\r\n    },\r\n  },\r\n  typography: {\r\n    h5: {\r\n      fontWeight: 500,\r\n      fontSize: 26,\r\n      letterSpacing: 0.5,\r\n    },\r\n  },\r\n  shape: {\r\n    borderRadius: 8,\r\n  },\r\n  props: {\r\n    MuiTab: {\r\n      disableRipple: true,\r\n    },\r\n  },\r\n  mixins: {\r\n    toolbar: {\r\n      minHeight: 48,\r\n    },\r\n  },\r\n});\r\n\r\ntheme = {\r\n  ...theme,\r\n  overrides: {\r\n    MuiDrawer: {\r\n      paper: {\r\n        backgroundColor: '#18202c',\r\n      },\r\n    },\r\n    MuiButton: {\r\n      label: {\r\n        textTransform: 'none',\r\n      },\r\n      contained: {\r\n        boxShadow: 'none',\r\n        '&:active': {\r\n          boxShadow: 'none',\r\n        },\r\n      },\r\n    },\r\n    MuiTabs: {\r\n      root: {\r\n        marginLeft: theme.spacing(1),\r\n      },\r\n      indicator: {\r\n        height: 3,\r\n        borderTopLeftRadius: 3,\r\n        borderTopRightRadius: 3,\r\n        backgroundColor: theme.palette.common.white,\r\n      },\r\n    },\r\n    MuiTab: {\r\n      root: {\r\n        textTransform: 'none',\r\n        margin: '0 16px',\r\n        minWidth: 0,\r\n        padding: 0,\r\n        [theme.breakpoints.up('md')]: {\r\n          padding: 0,\r\n          minWidth: 0,\r\n        },\r\n      },\r\n    },\r\n    MuiIconButton: {\r\n      root: {\r\n        padding: theme.spacing(1),\r\n      },\r\n    },\r\n    MuiTooltip: {\r\n      tooltip: {\r\n        borderRadius: 4,\r\n      },\r\n    },\r\n    MuiDivider: {\r\n      root: {\r\n        backgroundColor: '#404854',\r\n      },\r\n    },\r\n    MuiListItemText: {\r\n      primary: {\r\n        fontWeight: theme.typography.fontWeightMedium,\r\n      },\r\n    },\r\n    MuiListItemIcon: {\r\n      root: {\r\n        color: 'inherit',\r\n        marginRight: 0,\r\n        '& svg': {\r\n          fontSize: 20,\r\n        },\r\n      },\r\n    },\r\n    MuiAvatar: {\r\n      root: {\r\n        width: 32,\r\n        height: 32,\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst drawerWidth = 170;\r\n\r\nconst styles = {\r\n  root: {\r\n    display: 'flex',\r\n    minHeight: '100vh',\r\n  },\r\n  drawer: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n  },\r\n  app: {\r\n    flex: 1,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  main: {\r\n    flex: 1,\r\n    padding: theme.spacing(4, 6),\r\n    background: '#eaeff1',\r\n  },\r\n  footer: {\r\n    padding: theme.spacing(2),\r\n    background: '#eaeff1',\r\n  },\r\n  firebase: {\r\n    fontSize: 24,\r\n    color: theme.palette.common.white,\r\n  },\r\n  categoryHeader: {\r\n    paddingTop: theme.spacing(2),\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  categoryHeaderPrimary: {\r\n    color: theme.palette.common.white,\r\n  },\r\n  item: {\r\n    paddingTop: 1,\r\n    paddingBottom: 1,\r\n    color: 'rgba(255, 255, 255, 0.7)',\r\n    '&:hover,&:focus': {\r\n      backgroundColor: 'rgba(255, 255, 255, 0.08)',\r\n    },\r\n  },\r\n  itemCategory: {\r\n    backgroundColor: '#232f3e',\r\n    boxShadow: '0 -1px 0 #404854 inset',\r\n    paddingTop: theme.spacing(2),\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  itemActiveItem: {\r\n    color: '#4fc3f7',\r\n  },\r\n  itemPrimary: {\r\n    fontSize: 'inherit',\r\n  },\r\n  itemIcon: {\r\n    minWidth: 'auto',\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  divider: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n};\r\n\r\nfunction Paperbase(props) {\r\n  let [button, setButton] = React.useState([true, false, false, false, false]);\r\n  const {...other } = props;\r\n  const categories = [\r\n    {\r\n      id: '기능',\r\n      children: [\r\n        { id: '질문생성', icon: <ContactSupportSharpIcon/>, active: button[0], bvalue : 0},\r\n        { id: '기사요약', icon: <AssignmentSharpIcon/> , active: button[1], bvalue : 1},\r\n        { id: '동화창작', icon: <MenuBookSharpIcon/>, active: button[2], bvalue : 2 },\r\n        { id: '리뷰생성', icon: <EditLocationSharpIcon/> , active: button[3], bvalue : 3},\r\n        { id: '챗봇모델', icon: <QuestionAnswerSharpIcon /> , active: button[4], bvalue : 4},\r\n      ],\r\n    },\r\n  ];\r\n  \r\n  const { classes } = props;\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  const handleListItemClick = (event, index) => {\r\n    setContent(index);\r\n    var buttons =[false, false, false, false, false];\r\n    buttons[index] = true;\r\n    setButton(buttons);\r\n  };\r\n\r\n  const [content, setContent] = React.useState(0);\r\n  function Content() {\r\n    if(content === 0) return <Question_generation/>;\r\n    else if(content === 1){return <Article_summarization/>}\r\n    else if(content === 2){return <Tale_generation/>}\r\n    else if(content === 3){return <Review_generation/>}\r\n    else if(content === 4){return <Chat_bot/>}\r\n  }\r\n  \r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <div className={classes.root}>\r\n        <CssBaseline />\r\n        {/* <Grid container spacing={2}  alignItems=\"center\">\r\n        <Grid item xs={2}> */}\r\n        <nav className={classes.drawer}>\r\n          <Hidden xsDown implementation=\"css\">\r\n            <Drawer variant=\"permanent\" {...other}>\r\n              <List disablePadding>\r\n                <ListItem className={clsx(classes.firebase, classes.item, classes.itemCategory)}>\r\n                  <img src = {kogi} width='150' alt=''/>\r\n                </ListItem>\r\n                {categories.map(({ id, children }) => (\r\n                  <React.Fragment key={id}>\r\n                    <ListItem className={classes.categoryHeader}>\r\n                      <ListItemText\r\n                        classes={{\r\n                          primary: classes.categoryHeaderPrimary,\r\n                        }}>\r\n                        {id}\r\n                      </ListItemText>\r\n                    </ListItem>\r\n                    {children.map(({ id: childId, icon, active, bvalue }) => (\r\n                      <ListItem\r\n                        key={childId}\r\n                        value={bvalue}\r\n                        button\r\n                        onClick={(event) => handleListItemClick(event, bvalue)}\r\n                        className={clsx(classes.item, active && classes.itemActiveItem)}\r\n                      >\r\n                        <ListItemIcon className={classes.itemIcon}>{icon}</ListItemIcon>\r\n                        <ListItemText\r\n                          classes={{\r\n                            primary: classes.itemPrimary,\r\n                          }}>\r\n                          {childId}\r\n                        </ListItemText>\r\n                      </ListItem>\r\n                    ))}\r\n                    <Divider className={classes.divider} />\r\n                  </React.Fragment>\r\n                ))}\r\n              </List>\r\n            </Drawer>\r\n          </Hidden>\r\n        </nav>\r\n        \r\n        <div className={classes.app}>\r\n          <Header index = {content} onDrawerToggle={handleDrawerToggle} />\r\n          <main className={classes.main}>\r\n            {Content()}\r\n          </main>\r\n          <footer className={classes.footer}>\r\n          </footer>\r\n        </div>\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nPaperbase.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Paperbase);","C:\\Users\\homin\\Documents\\GitHub\\kogi\\frontend\\src\\navigator.js",["59","60","61","62","63"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport DnsRoundedIcon from '@material-ui/icons/DnsRounded';\r\nimport PermMediaOutlinedIcon from '@material-ui/icons/PhotoSizeSelectActual';\r\nimport PublicIcon from '@material-ui/icons/Public';\r\nimport SettingsEthernetIcon from '@material-ui/icons/SettingsEthernet';\r\nimport SettingsInputComponentIcon from '@material-ui/icons/SettingsInputComponent';\r\nimport TimerIcon from '@material-ui/icons/Timer';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport PhonelinkSetupIcon from '@material-ui/icons/PhonelinkSetup';\r\nimport kogi from './kogi.png';\r\nconst categories = [\r\n  {\r\n    id: '기능',\r\n    children: [\r\n      { id: '질문생성', icon: <PeopleIcon />, active: true },\r\n      { id: '기사요약', icon: <DnsRoundedIcon /> },\r\n      { id: '리뷰생성', icon: <PermMediaOutlinedIcon /> },\r\n      { id: '동화창작', icon: <PublicIcon /> },\r\n      { id: '챗봇모델', icon: <SettingsEthernetIcon /> },\r\n    ],\r\n  },\r\n\r\n];\r\n\r\nconst styles = (theme) => ({\r\n  categoryHeader: {\r\n    paddingTop: theme.spacing(2),\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  categoryHeaderPrimary: {\r\n    color: theme.palette.common.white,\r\n  },\r\n  item: {\r\n    paddingTop: 1,\r\n    paddingBottom: 1,\r\n    color: 'rgba(255, 255, 255, 0.7)',\r\n    '&:hover,&:focus': {\r\n      backgroundColor: 'rgba(255, 255, 255, 0.08)',\r\n    },\r\n  },\r\n  itemCategory: {\r\n    backgroundColor: '#232f3e',\r\n    boxShadow: '0 -1px 0 #404854 inset',\r\n    paddingTop: theme.spacing(2),\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  firebase: {\r\n    fontSize: 24,\r\n    color: theme.palette.common.white,\r\n  },\r\n  itemActiveItem: {\r\n    color: '#4fc3f7',\r\n  },\r\n  itemPrimary: {\r\n    fontSize: 'inherit',\r\n  },\r\n  itemIcon: {\r\n    minWidth: 'auto',\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  divider: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n});\r\n\r\nfunction Navigator(props) {\r\n  const { classes, ...other } = props;\r\n\r\n  return (\r\n    <Drawer variant=\"permanent\" {...other}>\r\n      <List disablePadding>\r\n        <ListItem className={clsx(classes.firebase, classes.item, classes.itemCategory)}>\r\n          <img src = {kogi} alt= ''/>\r\n        </ListItem>\r\n\r\n        {categories.map(({ id, children }) => (\r\n          <React.Fragment key={id}>\r\n            <ListItem className={classes.categoryHeader}>\r\n              <ListItemText\r\n                classes={{\r\n                  primary: classes.categoryHeaderPrimary,\r\n                }}\r\n              >\r\n                {id}\r\n              </ListItemText>\r\n            </ListItem>\r\n            {children.map(({ id: childId, icon, active }) => (\r\n              <ListItem\r\n                key={childId}\r\n                button\r\n                className={clsx(classes.item, active && classes.itemActiveItem)}\r\n              >\r\n                <ListItemIcon className={classes.itemIcon}>{icon}</ListItemIcon>\r\n                <ListItemText\r\n                  classes={{\r\n                    primary: classes.itemPrimary,\r\n                  }}\r\n                >\r\n                  {childId}\r\n                </ListItemText>\r\n              </ListItem>\r\n            ))}\r\n\r\n            <Divider className={classes.divider} />\r\n          </React.Fragment>\r\n        ))}\r\n      </List>\r\n    </Drawer>\r\n  );\r\n}\r\n\r\nNavigator.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Navigator);",["64","65"],"C:\\Users\\homin\\Documents\\GitHub\\kogi\\frontend\\src\\header.js",["66","67","68","69","70","71","72","73","74","75","76","77","78","79"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Link from '@material-ui/core/Link';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport ContactSupportSharpIcon from '@material-ui/icons/ContactSupportSharp';\r\nimport QuestionAnswerSharpIcon from '@material-ui/icons/QuestionAnswerSharp';\r\nimport AssignmentSharpIcon from '@material-ui/icons/AssignmentSharp';\r\nimport MenuBookSharpIcon from '@material-ui/icons/MenuBookSharp';\r\nimport EditLocationSharpIcon from '@material-ui/icons/EditLocationSharp';\r\n\r\nconst lightColor = 'rgba(255, 255, 255, 0.7)';\r\n\r\nconst styles = (theme) => ({\r\n  secondaryBar: {\r\n    zIndex: 0,\r\n  },\r\n  menuButton: {\r\n    marginLeft: -theme.spacing(1),\r\n  },\r\n  iconButtonAvatar: {\r\n    padding: 4,\r\n  },\r\n  link: {\r\n    textDecoration: 'none',\r\n    color: lightColor,\r\n    '&:hover': {\r\n      color: theme.palette.common.white,\r\n    },\r\n  },\r\n  button: {\r\n    borderColor: lightColor,\r\n  },\r\n});\r\n\r\n\r\n\r\nfunction Header(props) {\r\n  const { classes, onDrawerToggle } = props;\r\n  let [icons, setIcon] = React.useState([<ContactSupportSharpIcon/>,<AssignmentSharpIcon/>,<MenuBookSharpIcon/>,<EditLocationSharpIcon/>,<QuestionAnswerSharpIcon/>]);\r\n  let [title, setTitle] = React.useState(['질문생성','기사요약','동화창작','리뷰생성','챗봇모델']);\r\n  \r\n  return (\r\n    <React.Fragment>\r\n      {/* <AppBar color=\"primary\" position=\"sticky\" elevation={0}>\r\n        <Toolbar>\r\n          <Grid container spacing={1} alignItems=\"center\">\r\n            <Hidden smUp>\r\n              <Grid item>\r\n                <IconButton\r\n                  color=\"inherit\"\r\n                  aria-label=\"open drawer\"\r\n                  onClick={onDrawerToggle}\r\n                  className={classes.menuButton}\r\n                >\r\n                  <MenuIcon />\r\n                </IconButton>\r\n              </Grid>\r\n            </Hidden>\r\n            <Grid item xs />\r\n            <Grid item>\r\n              <Link className={classes.link} href=\"#\" variant=\"body2\">\r\n                Go to docs\r\n              </Link>\r\n            </Grid>\r\n            <Grid item>\r\n              <Tooltip title=\"Alerts • No alerts\">\r\n                <IconButton color=\"inherit\">\r\n                  <NotificationsIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </Grid>\r\n            <Grid item>\r\n              <IconButton color=\"inherit\" className={classes.iconButtonAvatar}>\r\n                <Avatar src=\"/static/images/avatar/1.jpg\" alt=\"My Avatar\" />\r\n              </IconButton>\r\n            </Grid>\r\n          </Grid>\r\n        </Toolbar>\r\n      </AppBar> */}\r\n      <AppBar\r\n        component=\"div\"\r\n        className={classes.secondaryBar}\r\n        color=\"primary\"\r\n        position=\"static\"\r\n        elevation={0}\r\n      >\r\n        <Toolbar>\r\n          <Grid container alignItems=\"center\" spacing={1}>\r\n            <Grid item xs>\r\n              <Typography color=\"inherit\" variant=\"h5\" component=\"h1\">\r\n                {icons[props.index]} {title[props.index]}\r\n              </Typography>\r\n            </Grid>\r\n            {/* <Grid item>\r\n              <Button className={classes.button} variant=\"outlined\" color=\"inherit\" size=\"small\">\r\n                Web setup\r\n              </Button>\r\n            </Grid> */}\r\n            \r\n          </Grid>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {/* <AppBar\r\n        component=\"div\"\r\n        className={classes.secondaryBar}\r\n        color=\"primary\"\r\n        position=\"static\"\r\n        elevation={0}\r\n      >\r\n        <Tabs value={0} textColor=\"inherit\">\r\n          <Tab textColor=\"inherit\" label=\"Users\" />\r\n          <Tab textColor=\"inherit\" label=\"Sign-in method\" />\r\n          <Tab textColor=\"inherit\" label=\"Templates\" />\r\n          <Tab textColor=\"inherit\" label=\"Usage\" />\r\n        </Tabs>\r\n      </AppBar> */}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nHeader.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  onDrawerToggle: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Header);","C:\\Users\\homin\\Documents\\GitHub\\kogi\\frontend\\src\\question_generation.js",[],"C:\\Users\\homin\\Documents\\GitHub\\kogi\\frontend\\src\\article_summarization.js",[],"C:\\Users\\homin\\Documents\\GitHub\\kogi\\frontend\\src\\chat_bot.js",["80","81","82","83"],"import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport clsx from 'clsx';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport fetchIntercept from 'fetch-intercept';\r\nconst styles = (theme) => ({\r\n  paperPrimary: {\r\n    maxWidth: 3000,\r\n    margin: 'auto',\r\n    overflow: 'hidden',\r\n  },\r\n  paperSecondary: {\r\n    maxWidth: 300,\r\n    margin: 'auto',\r\n    overflow: 'hidden',\r\n  },\r\n  generateBar: {\r\n    borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\r\n  },\r\n  generateInput: {\r\n    fontSize: theme.typography.fontSize,\r\n  },\r\n  block: {\r\n    display: 'block',\r\n  },\r\n  button: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  contentWrapper: {\r\n    margin: '40px 16px',\r\n  },\r\n  slide:{\r\n    width : 200\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  me:{\r\n    textAlign: 'right'\r\n  },\r\n  bot:{\r\n    textAlign : 'left'\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n});\r\n\r\nconst apiURL = \"http://localhost:8888\";\r\n\r\nfunction Chat_bot(props) {\r\n  const { classes } = props;\r\n  let [model, setModel] = useState('korquad');\r\n  let [result, setResult] = useState('');\r\n  let [Text, setText] = useState('');\r\n  let [converse, setConverse] = useState([]);\r\n  let [temperature, setTemp] = useState(1.0);\r\n  let [top_p, setTopp] = useState(0.9);\r\n  let [top_k, setTopk] = useState(10);\r\n  let [state, setState] = useState(false);\r\n  const unregister = fetchIntercept.register({\r\n    request: function (url, config) {\r\n        setState(true);\r\n        return [url, config];\r\n    },\r\n\r\n    requestError: function (error) {\r\n      setState(false);\r\n        return Promise.reject(error);\r\n    },\r\n\r\n    response: function (response) {\r\n      setState(false);\r\n        return response;\r\n    },\r\n\r\n    responseError: function (error) {\r\n      setState(false);\r\n        return Promise.reject(error);\r\n    }\r\n});\r\n  function _post(text) {\r\n    unregister();\r\n    const Data = {\r\n      textID: \"Chat-Bot\",\r\n      content: text,\r\n      model: model,\r\n      temperature: temperature,\r\n      top_p: top_p,\r\n      top_k: top_k,\r\n      sentence_length: \"10\",\r\n      sentence_count: \"3\"\r\n    }\r\n    const raw = JSON.stringify(Data);\r\n\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Access-Control-Allow-Headers': '*',\r\n      },\r\n      body: raw\r\n    };\r\n\r\n    fetch(`${apiURL}/api/question-generation`, requestOptions)\r\n      .then(response => response.json())\r\n      .then(json=>setResult(json['sentence']))\r\n      .catch(error => setText(error));\r\n  };\r\n\r\n  function refresh(){\r\n    setText('');\r\n    setConverse([]);\r\n  };\r\n  \r\n  const handleChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  function addChat(text){\r\n    var temp = [...converse, {id : text, toggle : 0}];\r\n    setConverse(temp);\r\n    setText('');\r\n    _post(text);\r\n    temp = [...temp, {id : result, toggle : 1}];\r\n    setConverse(temp);\r\n  };\r\n\r\n  function handleClick(){\r\n    addChat(Text);\r\n  };\r\n\r\n  function tempSlide(event, newValue){\r\n    setTemp(newValue);\r\n  };\r\n\r\n  function toppSlide(event, newValue){\r\n    setTopp(newValue);\r\n  };\r\n\r\n  function topkSlide(event, newValue){\r\n    setTopk(newValue);\r\n  };\r\n\r\n  const handleModel = (event) => {\r\n    setModel(event.target.value);\r\n  };\r\n\r\n  const keyHandler = (event)=>{\r\n    if(event.key === \"Enter\"){\r\n      addChat(Text);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <Toolbar>\r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel shrink htmlFor=\"model selection\">\r\n           모델\r\n          </InputLabel>\r\n          <NativeSelect\r\n            onChange={handleModel}\r\n            inputProps={{\r\n            name: 'models',\r\n            id: 'model selection',\r\n            }}\r\n          >\r\n            <option value=\"chatbot\">챗봇모델</option>\r\n          </NativeSelect>\r\n        {/* <FormHelperText>Label + placeholder</FormHelperText> */}\r\n        </FormControl>\r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel shrink htmlFor=\"example selection\">\r\n          예시\r\n          </InputLabel>\r\n          <NativeSelect\r\n          \r\n            inputProps={{\r\n              name: 'examples',\r\n              id: 'example selection',\r\n            }}\r\n          >\r\n          <option value=\"\">None</option>\r\n         </NativeSelect>\r\n        {/* <FormHelperText>Label + placeholder</FormHelperText> */}\r\n        </FormControl>\r\n      </Toolbar>\r\n\r\n      <Grid container spacing={2}  alignItems=\"center\">\r\n        <Grid item xs={8}>\r\n          <Paper className={classes.paperPrimary}>\r\n            <div className={classes.contentWrapper}>\r\n              <List style={{height: '500px', border:'1px solid black', overflow: 'hidden'}}>\r\n                <ListSubheader/>\r\n              {converse.map(({ id: childId, toggle: user }) => (\r\n              <ListItem\r\n                value = {user}\r\n                key={childId}\r\n              >\r\n              <ListItemText\r\n                className={clsx((!user)&&classes.me, (user)&&classes.bot)}\r\n              >\r\n                {childId}\r\n              </ListItemText>\r\n              </ListItem>\r\n            ))}\r\n              </List>\r\n            </div>\r\n              <Divider variant=\"middle\" />\r\n            \r\n              <Toolbar>\r\n                <Grid container spacing={2}  alignItems=\"center\">\r\n                  <Grid item xs>\r\n                    <TextField\r\n                      fullWidth\r\n                      placeholder='대화를 입력해주세요'\r\n                      value={Text}\r\n                      onKeyDown={keyHandler}\r\n                      onChange={handleChange}\r\n                      InputProps={{\r\n                        disableUnderline: true,\r\n                        className: classes.searchInput,\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item>\r\n                    <Button onClick={handleClick} variant=\"contained\" color=\"primary\" className={classes.button}>\r\n                      생성\r\n                    </Button>\r\n                    <Tooltip title=\"Refresh\">\r\n                      <IconButton onClick={refresh}>\r\n                        <RefreshIcon className={classes.block} color=\"inherit\" />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                  </Grid>\r\n                </Grid>\r\n              </Toolbar>\r\n            </Paper>\r\n          </Grid>\r\n        <Grid item xs>\r\n          <Paper className={classes.paperSecondary} align ='center'>\r\n            <Typography id=\"temperature\" gutterBottom>\r\n              temperature : {temperature}\r\n            </Typography>\r\n            <Slider\r\n              className={classes.slide}\r\n              defaultValue={1.0}\r\n              aria-labelledby=\"discrete-slider-small-steps\"\r\n              step={0.1}\r\n              marks\r\n              min={0.5}\r\n              max={2.0}\r\n              valueLabelDisplay=\"auto\"\r\n              onChange = {tempSlide}\r\n            />\r\n            <Typography id=\"top_p\" gutterBottom>\r\n              top_p : {top_p}\r\n            </Typography>\r\n            <Slider\r\n              className={classes.slide}\r\n              defaultValue={0.9}\r\n              aria-labelledby=\"discrete-slider-small-steps\"\r\n              step={0.05}\r\n              marks\r\n              min={0.5}\r\n              max={1.0}\r\n              valueLabelDisplay=\"auto\"\r\n              onChange = {toppSlide}\r\n            />\r\n            <Typography id=\"top_k\" gutterBottom>\r\n              top_k : {top_k}\r\n            </Typography>\r\n            <Slider\r\n              className={classes.slide}\r\n              defaultValue={10}\r\n              aria-labelledby=\"discrete-slider-small-steps\"\r\n              step={5}\r\n              marks\r\n              min={5}\r\n              max={100}\r\n              valueLabelDisplay=\"auto\"\r\n              onChange = {topkSlide}\r\n            />\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n      <Backdrop className={classes.backdrop} open={state}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n    </div>\r\n  );\r\n}\r\n\r\nChat_bot.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Chat_bot);","C:\\Users\\homin\\Documents\\GitHub\\kogi\\frontend\\src\\review_generation.js",[],"C:\\Users\\homin\\Documents\\GitHub\\kogi\\frontend\\src\\tale_generation.js",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":236,"column":30,"nodeType":"90","endLine":236,"endColumn":52},{"ruleId":"88","severity":1,"message":"91","line":237,"column":35,"nodeType":"90","endLine":237,"endColumn":59},{"ruleId":"88","severity":1,"message":"92","line":238,"column":35,"nodeType":"90","endLine":238,"endColumn":53},{"ruleId":"88","severity":1,"message":"93","line":239,"column":35,"nodeType":"90","endLine":239,"endColumn":55},{"ruleId":"88","severity":1,"message":"94","line":240,"column":35,"nodeType":"90","endLine":240,"endColumn":46},{"ruleId":"95","severity":1,"message":"96","line":11,"column":8,"nodeType":"97","messageId":"98","endLine":11,"endColumn":16},{"ruleId":"95","severity":1,"message":"99","line":17,"column":8,"nodeType":"97","messageId":"98","endLine":17,"endColumn":34},{"ruleId":"95","severity":1,"message":"100","line":18,"column":8,"nodeType":"97","messageId":"98","endLine":18,"endColumn":17},{"ruleId":"95","severity":1,"message":"101","line":19,"column":8,"nodeType":"97","messageId":"98","endLine":19,"endColumn":20},{"ruleId":"95","severity":1,"message":"102","line":20,"column":8,"nodeType":"97","messageId":"98","endLine":20,"endColumn":26},{"ruleId":"84","replacedBy":"103"},{"ruleId":"86","replacedBy":"104"},{"ruleId":"95","severity":1,"message":"105","line":4,"column":8,"nodeType":"97","messageId":"98","endLine":4,"endColumn":14},{"ruleId":"95","severity":1,"message":"106","line":5,"column":8,"nodeType":"97","messageId":"98","endLine":5,"endColumn":14},{"ruleId":"95","severity":1,"message":"107","line":7,"column":8,"nodeType":"97","messageId":"98","endLine":7,"endColumn":16},{"ruleId":"95","severity":1,"message":"108","line":8,"column":8,"nodeType":"97","messageId":"98","endLine":8,"endColumn":14},{"ruleId":"95","severity":1,"message":"109","line":9,"column":8,"nodeType":"97","messageId":"98","endLine":9,"endColumn":18},{"ruleId":"95","severity":1,"message":"110","line":10,"column":8,"nodeType":"97","messageId":"98","endLine":10,"endColumn":12},{"ruleId":"95","severity":1,"message":"111","line":11,"column":8,"nodeType":"97","messageId":"98","endLine":11,"endColumn":16},{"ruleId":"95","severity":1,"message":"112","line":12,"column":8,"nodeType":"97","messageId":"98","endLine":12,"endColumn":25},{"ruleId":"95","severity":1,"message":"113","line":13,"column":8,"nodeType":"97","messageId":"98","endLine":13,"endColumn":11},{"ruleId":"95","severity":1,"message":"114","line":14,"column":8,"nodeType":"97","messageId":"98","endLine":14,"endColumn":12},{"ruleId":"95","severity":1,"message":"115","line":16,"column":8,"nodeType":"97","messageId":"98","endLine":16,"endColumn":15},{"ruleId":"95","severity":1,"message":"116","line":52,"column":20,"nodeType":"97","messageId":"98","endLine":52,"endColumn":34},{"ruleId":"95","severity":1,"message":"117","line":53,"column":15,"nodeType":"97","messageId":"98","endLine":53,"endColumn":22},{"ruleId":"95","severity":1,"message":"118","line":54,"column":15,"nodeType":"97","messageId":"98","endLine":54,"endColumn":23},{"ruleId":"95","severity":1,"message":"119","line":3,"column":8,"nodeType":"97","messageId":"98","endLine":3,"endColumn":14},{"ruleId":"95","severity":1,"message":"120","line":13,"column":8,"nodeType":"97","messageId":"98","endLine":13,"endColumn":18},{"ruleId":"95","severity":1,"message":"121","line":19,"column":8,"nodeType":"97","messageId":"98","endLine":19,"endColumn":22},{"ruleId":"95","severity":1,"message":"122","line":23,"column":8,"nodeType":"97","messageId":"98","endLine":23,"endColumn":20},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"react/jsx-pascal-case","Imported JSX component Question_generation must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component Article_summarization must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Tale_generation must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Review_generation must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Chat_bot must be in PascalCase or SCREAMING_SNAKE_CASE","no-unused-vars","'HomeIcon' is defined but never used.","Identifier","unusedVar","'SettingsInputComponentIcon' is defined but never used.","'TimerIcon' is defined but never used.","'SettingsIcon' is defined but never used.","'PhonelinkSetupIcon' is defined but never used.",["123"],["124"],"'Avatar' is defined but never used.","'Button' is defined but never used.","'HelpIcon' is defined but never used.","'Hidden' is defined but never used.","'IconButton' is defined but never used.","'Link' is defined but never used.","'MenuIcon' is defined but never used.","'NotificationsIcon' is defined but never used.","'Tab' is defined but never used.","'Tabs' is defined but never used.","'Tooltip' is defined but never used.","'onDrawerToggle' is assigned a value but never used.","'setIcon' is assigned a value but never used.","'setTitle' is assigned a value but never used.","'AppBar' is defined but never used.","'SearchIcon' is defined but never used.","'FormHelperText' is defined but never used.","'ListItemIcon' is defined but never used.","no-global-assign","no-unsafe-negation"]